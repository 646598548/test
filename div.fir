circuit div :
  module div :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip dividend : UInt<10>, flip divisor : UInt<10>, divout : UInt<10>, remain : UInt<10>, div_done : UInt<1>}

    reg dividend_temp : UInt<20>, clock with :
      reset => (reset, UInt<20>("h0")) @[pass.scala 41:34]
    reg divisor_temp : UInt<20>, clock with :
      reset => (reset, UInt<20>("h0")) @[pass.scala 42:33]
    wire flag_cnt : UInt<5>
    flag_cnt <= UInt<5>("h0")
    reg cnt : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[pass.scala 45:24]
    wire r_out : UInt<1>[10] @[pass.scala 46:35]
    r_out[0] <= UInt<1>("h0") @[pass.scala 46:35]
    r_out[1] <= UInt<1>("h0") @[pass.scala 46:35]
    r_out[2] <= UInt<1>("h0") @[pass.scala 46:35]
    r_out[3] <= UInt<1>("h0") @[pass.scala 46:35]
    r_out[4] <= UInt<1>("h0") @[pass.scala 46:35]
    r_out[5] <= UInt<1>("h0") @[pass.scala 46:35]
    r_out[6] <= UInt<1>("h0") @[pass.scala 46:35]
    r_out[7] <= UInt<1>("h0") @[pass.scala 46:35]
    r_out[8] <= UInt<1>("h0") @[pass.scala 46:35]
    r_out[9] <= UInt<1>("h0") @[pass.scala 46:35]
    wire d_out : UInt<1>[10] @[pass.scala 47:35]
    d_out[0] <= UInt<1>("h0") @[pass.scala 47:35]
    d_out[1] <= UInt<1>("h0") @[pass.scala 47:35]
    d_out[2] <= UInt<1>("h0") @[pass.scala 47:35]
    d_out[3] <= UInt<1>("h0") @[pass.scala 47:35]
    d_out[4] <= UInt<1>("h0") @[pass.scala 47:35]
    d_out[5] <= UInt<1>("h0") @[pass.scala 47:35]
    d_out[6] <= UInt<1>("h0") @[pass.scala 47:35]
    d_out[7] <= UInt<1>("h0") @[pass.scala 47:35]
    d_out[8] <= UInt<1>("h0") @[pass.scala 47:35]
    d_out[9] <= UInt<1>("h0") @[pass.scala 47:35]
    wire comp : UInt<1>
    comp <= UInt<1>("h0")
    wire temp : UInt<20>
    temp <= UInt<20>("h0")
    node _temp_T = bits(comp, 0, 0) @[pass.scala 51:24]
    node _temp_T_1 = sub(dividend_temp, divisor_temp) @[pass.scala 51:45]
    node _temp_T_2 = tail(_temp_T_1, 1) @[pass.scala 51:45]
    node _temp_T_3 = add(_temp_T_2, UInt<1>("h1")) @[pass.scala 51:58]
    node _temp_T_4 = tail(_temp_T_3, 1) @[pass.scala 51:58]
    node _temp_T_5 = dshl(_temp_T_4, UInt<1>("h1")) @[pass.scala 51:63]
    node _temp_T_6 = dshl(dividend_temp, UInt<1>("h1")) @[pass.scala 51:82]
    node _temp_T_7 = mux(_temp_T, _temp_T_5, _temp_T_6) @[pass.scala 51:18]
    temp <= _temp_T_7 @[pass.scala 51:13]
    node _comp_T = bits(dividend_temp, 19, 10) @[pass.scala 53:28]
    node _comp_T_1 = bits(divisor_temp, 19, 10) @[pass.scala 53:49]
    node _comp_T_2 = geq(_comp_T, _comp_T_1) @[pass.scala 53:35]
    comp <= _comp_T_2 @[pass.scala 53:13]
    node _T = eq(cnt, UInt<1>("h0")) @[pass.scala 55:17]
    when _T : @[pass.scala 55:24]
      dividend_temp <= io.dividend @[pass.scala 57:26]
      node _divisor_temp_T = shl(io.divisor, 10) @[pass.scala 58:37]
      divisor_temp <= _divisor_temp_T @[pass.scala 58:25]
      node _cnt_T = add(cnt, UInt<1>("h1")) @[pass.scala 59:21]
      node _cnt_T_1 = tail(_cnt_T, 1) @[pass.scala 59:21]
      cnt <= _cnt_T_1 @[pass.scala 59:16]
    else :
      node _T_1 = neq(cnt, UInt<4>("hc")) @[pass.scala 60:23]
      when _T_1 : @[pass.scala 60:31]
        dividend_temp <= temp @[pass.scala 61:26]
        node _cnt_T_2 = add(cnt, UInt<1>("h1")) @[pass.scala 62:21]
        node _cnt_T_3 = tail(_cnt_T_2, 1) @[pass.scala 62:21]
        cnt <= _cnt_T_3 @[pass.scala 62:16]
      else :
        cnt <= UInt<1>("h0") @[pass.scala 72:16]
    node _r_out_0_T = bits(dividend_temp, 10, 10) @[pass.scala 75:36]
    r_out[0] <= _r_out_0_T @[pass.scala 75:21]
    node _d_out_0_T = bits(dividend_temp, 0, 0) @[pass.scala 76:36]
    d_out[0] <= _d_out_0_T @[pass.scala 76:21]
    node _r_out_1_T = bits(dividend_temp, 11, 11) @[pass.scala 75:36]
    r_out[1] <= _r_out_1_T @[pass.scala 75:21]
    node _d_out_1_T = bits(dividend_temp, 1, 1) @[pass.scala 76:36]
    d_out[1] <= _d_out_1_T @[pass.scala 76:21]
    node _r_out_2_T = bits(dividend_temp, 12, 12) @[pass.scala 75:36]
    r_out[2] <= _r_out_2_T @[pass.scala 75:21]
    node _d_out_2_T = bits(dividend_temp, 2, 2) @[pass.scala 76:36]
    d_out[2] <= _d_out_2_T @[pass.scala 76:21]
    node _r_out_3_T = bits(dividend_temp, 13, 13) @[pass.scala 75:36]
    r_out[3] <= _r_out_3_T @[pass.scala 75:21]
    node _d_out_3_T = bits(dividend_temp, 3, 3) @[pass.scala 76:36]
    d_out[3] <= _d_out_3_T @[pass.scala 76:21]
    node _r_out_4_T = bits(dividend_temp, 14, 14) @[pass.scala 75:36]
    r_out[4] <= _r_out_4_T @[pass.scala 75:21]
    node _d_out_4_T = bits(dividend_temp, 4, 4) @[pass.scala 76:36]
    d_out[4] <= _d_out_4_T @[pass.scala 76:21]
    node _r_out_5_T = bits(dividend_temp, 15, 15) @[pass.scala 75:36]
    r_out[5] <= _r_out_5_T @[pass.scala 75:21]
    node _d_out_5_T = bits(dividend_temp, 5, 5) @[pass.scala 76:36]
    d_out[5] <= _d_out_5_T @[pass.scala 76:21]
    node _r_out_6_T = bits(dividend_temp, 16, 16) @[pass.scala 75:36]
    r_out[6] <= _r_out_6_T @[pass.scala 75:21]
    node _d_out_6_T = bits(dividend_temp, 6, 6) @[pass.scala 76:36]
    d_out[6] <= _d_out_6_T @[pass.scala 76:21]
    node _r_out_7_T = bits(dividend_temp, 17, 17) @[pass.scala 75:36]
    r_out[7] <= _r_out_7_T @[pass.scala 75:21]
    node _d_out_7_T = bits(dividend_temp, 7, 7) @[pass.scala 76:36]
    d_out[7] <= _d_out_7_T @[pass.scala 76:21]
    node _r_out_8_T = bits(dividend_temp, 18, 18) @[pass.scala 75:36]
    r_out[8] <= _r_out_8_T @[pass.scala 75:21]
    node _d_out_8_T = bits(dividend_temp, 8, 8) @[pass.scala 76:36]
    d_out[8] <= _d_out_8_T @[pass.scala 76:21]
    node _r_out_9_T = bits(dividend_temp, 19, 19) @[pass.scala 75:36]
    r_out[9] <= _r_out_9_T @[pass.scala 75:21]
    node _d_out_9_T = bits(dividend_temp, 9, 9) @[pass.scala 76:36]
    d_out[9] <= _d_out_9_T @[pass.scala 76:21]
    node io_remain_lo_lo = cat(r_out[1], r_out[0]) @[pass.scala 78:26]
    node io_remain_lo_hi_hi = cat(r_out[4], r_out[3]) @[pass.scala 78:26]
    node io_remain_lo_hi = cat(io_remain_lo_hi_hi, r_out[2]) @[pass.scala 78:26]
    node io_remain_lo = cat(io_remain_lo_hi, io_remain_lo_lo) @[pass.scala 78:26]
    node io_remain_hi_lo = cat(r_out[6], r_out[5]) @[pass.scala 78:26]
    node io_remain_hi_hi_hi = cat(r_out[9], r_out[8]) @[pass.scala 78:26]
    node io_remain_hi_hi = cat(io_remain_hi_hi_hi, r_out[7]) @[pass.scala 78:26]
    node io_remain_hi = cat(io_remain_hi_hi, io_remain_hi_lo) @[pass.scala 78:26]
    node _io_remain_T = cat(io_remain_hi, io_remain_lo) @[pass.scala 78:26]
    io.remain <= _io_remain_T @[pass.scala 78:18]
    node io_divout_lo_lo = cat(d_out[1], d_out[0]) @[pass.scala 79:26]
    node io_divout_lo_hi_hi = cat(d_out[4], d_out[3]) @[pass.scala 79:26]
    node io_divout_lo_hi = cat(io_divout_lo_hi_hi, d_out[2]) @[pass.scala 79:26]
    node io_divout_lo = cat(io_divout_lo_hi, io_divout_lo_lo) @[pass.scala 79:26]
    node io_divout_hi_lo = cat(d_out[6], d_out[5]) @[pass.scala 79:26]
    node io_divout_hi_hi_hi = cat(d_out[9], d_out[8]) @[pass.scala 79:26]
    node io_divout_hi_hi = cat(io_divout_hi_hi_hi, d_out[7]) @[pass.scala 79:26]
    node io_divout_hi = cat(io_divout_hi_hi, io_divout_hi_lo) @[pass.scala 79:26]
    node _io_divout_T = cat(io_divout_hi, io_divout_lo) @[pass.scala 79:26]
    io.divout <= _io_divout_T @[pass.scala 79:18]
    node _io_div_done_T = eq(cnt, UInt<4>("hb")) @[pass.scala 80:29]
    node _io_div_done_T_1 = mux(_io_div_done_T, UInt<1>("h1"), UInt<1>("h0")) @[pass.scala 80:25]
    io.div_done <= _io_div_done_T_1 @[pass.scala 80:20]

