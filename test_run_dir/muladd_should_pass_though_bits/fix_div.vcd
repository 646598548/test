$date
2024-04-20T09:50+0000
$end
$version
0.2
$end
$comment

$end
$timescale 1ns  $end
$scope module fix_div $end
 $var wire 10 % io_out $end
 $var wire 4 ' mem_out_1 $end
 $var wire 10 ( io_dividend $end
 $var wire 11 . temp3 $end
 $var wire 4 0 mem_out_0 $end
 $var wire 4 4 mem_out_3 $end
 $var wire 1 7 mem $end
 $var wire 11 8 temp2 $end
 $var wire 11 9 dividend_temp $end
 $var wire 11 < out_temp $end
 $var wire 1 = clock $end
 $var wire 4 I mem_out_2 $end
 $var wire 1 L reset $end
 $var wire 11 M temp1 $end
 $var wire 11 N temp4 $end
 $var wire 10 P io_divsor $end
  $scope module mem $end
   $var wire 4 ! io_dataOut_3 $end
   $var wire 4 # mem_1 $end
   $var wire 4 ) io_addr $end
   $var wire 1 , clock $end
   $var wire 4 / mem_1_MPORT_addr_pipe_0 $end
   $var wire 4 1 mem_0 $end
   $var wire 4 2 io_dataOut_2 $end
   $var wire 4 5 mem_3 $end
   $var wire 4 ; mem_0_MPORT_addr_pipe_0 $end
   $var wire 4 ? mem_2 $end
   $var wire 1 C mem_2_MPORT_en_pipe_0 $end
   $var wire 1 D mem_0_MPORT_en_pipe_0 $end
   $var wire 1 E mem_3_MPORT_en_pipe_0 $end
   $var wire 4 F mem_3_MPORT_addr_pipe_0 $end
   $var wire 4 G io_dataOut_1 $end
   $var wire 1 K mem_1_MPORT_en_pipe_0 $end
   $var wire 4 O mem_2_MPORT_addr_pipe_0 $end
   $var wire 4 Q io_dataOut_0 $end
    $scope module mem_0 $end
      $scope module MPORT $end
       $var wire 1 " en $end
       $var wire 4 3 addr $end
       $var wire 4 A data $end
       $var wire 1 B clk $end
      $upscope $end
    $upscope $end
    $scope module mem_1 $end
      $scope module MPORT $end
       $var wire 1 $ clk $end
       $var wire 4 - data $end
       $var wire 1 H en $end
       $var wire 4 R addr $end
      $upscope $end
    $upscope $end
    $scope module mem_2 $end
      $scope module MPORT $end
       $var wire 1 & clk $end
       $var wire 4 : addr $end
       $var wire 1 @ en $end
       $var wire 4 J data $end
      $upscope $end
    $upscope $end
    $scope module mem_3 $end
      $scope module MPORT $end
       $var wire 1 * clk $end
       $var wire 4 + addr $end
       $var wire 1 6 en $end
       $var wire 4 > data $end
      $upscope $end
    $upscope $end
  $upscope $end
$upscope $end
$enddefinitions $end
$dumpvars
0C
b0000 '
0&
b0000 >
b0000 )
b00000000000 <
0=
b0000 !
b0010 #
06
07
0"
b0000000000 (
b0011 ?
b0000 O
b0000 :
b00000000000 M
b00000000000 8
b0000 ;
b00000000000 N
b0000 3
b00000000000 9
b0000 Q
b0000 4
b0000 R
b0000 J
b0000000000 %
b0000000000 P
0K
b0000 /
0L
b0000 0
0D
b00000000000 .
b0000 F
0E
b0000 G
b0000 2
b0000 +
b0000 I
0*
0H
b0000 A
b0001 1
0@
b0000 -
0,
b0100 5
0$
0B
$end
#0
b0010 -
b0001 Q
b01111000000 <
b1111000000 %
b0100 4
b00010000000 .
b0011 J
b0010 '
1L
b0100 >
b01000000000 M
b0100 !
b0001 0
b00001000000 N
b00100000000 8
b0010 G
b0011 2
b10000000000 9
b0011 I
b0001 A
#1
1B
1C
1&
1D
1K
16
1E
1=
1"
1@
1*
1$
1H
1,
#6
0B
b10111110010 <
b0111110010 %
b00011001011 .
0&
0=
0L
b1001011000 (
b01100101100 M
b0001 )
b00001100101 N
b00110010110 8
0*
b11001011000 9
0$
0,
b0001000000 P
#11
b0001 3
1B
b0001 R
1&
1=
b0001 /
b0001 F
1*
1$
b0001 +
b0001 O
b0001 :
1,
b0001 ;
#16
0B
0&
0*
0$
0=
0,
#21
1B
1&
1*
1$
1=
1,
#26
0B
0&
0*
0$
0=
0,
#31
1B
1&
1*
1$
1=
1,
#36
0B
0&
0*
0$
0=
0,
#41
1B
1&
1*
1$
1=
1,
#46
0B
0&
0*
0$
0=
0,
#51
1B
1&
1*
1$
1=
1,
#56
0B
0&
0*
0$
0=
0,
#61
1B
1&
1*
1$
1=
1,
#66
0B
0&
0*
0$
0=
0,
#71
1B
1&
1*
1$
1=
1,
#76
0B
0&
0*
0$
0=
0,
#81
1B
1&
1*
1$
1=
1,
#86
0B
0&
0*
0$
0=
0,
#91
1B
1&
1*
1$
1=
1,
#96
0B
0&
0*
0$
0=
0,
#101
1B
1&
1*
1$
1=
1,
#106
0B
0&
0*
0$
0=
0,
#111
1B
1&
1*
1$
1=
1,
#116
0B
0&
0*
0$
0=
0,
#121
1B
1&
1*
1$
1=
1,
#126
0B
0&
0*
0$
0=
0,
#131
1B
1&
1*
1$
1=
1,
#136
0B
0&
0*
0$
0=
0,
#141
1B
1&
1*
1$
1=
1,
#146
0B
0&
0*
0$
0=
0,
#151
1B
1&
1*
1$
1=
1,
#156
0B
0&
0*
0$
0=
0,
#161
1B
1&
1*
1$
1=
1,
#166
0=
b0000000000 (
b0000000000 P
