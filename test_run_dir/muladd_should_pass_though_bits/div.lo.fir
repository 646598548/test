circuit div :
  module div :
    input clock : Clock
    input reset : UInt<1>
    input io_dividend : UInt<10>
    input io_divisor : UInt<10>
    output io_divout : UInt<10>
    output io_remain : UInt<10>
    output io_div_done : UInt<1>

    reg dividend_temp : UInt<20>, clock with :
      reset => (UInt<1>("h0"), dividend_temp) @[pass.scala 41:34]
    reg divisor_temp : UInt<20>, clock with :
      reset => (UInt<1>("h0"), divisor_temp) @[pass.scala 42:33]
    reg cnt : UInt<5>, clock with :
      reset => (UInt<1>("h0"), cnt) @[pass.scala 45:24]
    node _comp_T = bits(dividend_temp, 19, 10) @[pass.scala 53:28]
    node _comp_T_1 = bits(divisor_temp, 19, 10) @[pass.scala 53:49]
    node _comp_T_2 = geq(_comp_T, _comp_T_1) @[pass.scala 53:35]
    node comp = _comp_T_2
    node _temp_T = bits(comp, 0, 0) @[pass.scala 51:24]
    node _temp_T_1 = sub(dividend_temp, divisor_temp) @[pass.scala 51:45]
    node _temp_T_2 = tail(_temp_T_1, 1) @[pass.scala 51:45]
    node _temp_T_3 = add(_temp_T_2, UInt<1>("h1")) @[pass.scala 51:58]
    node _temp_T_4 = tail(_temp_T_3, 1) @[pass.scala 51:58]
    node _temp_T_5 = dshl(_temp_T_4, UInt<1>("h1")) @[pass.scala 51:63]
    node _temp_T_6 = dshl(dividend_temp, UInt<1>("h1")) @[pass.scala 51:82]
    node _temp_T_7 = mux(_temp_T, _temp_T_5, _temp_T_6) @[pass.scala 51:18]
    node _T = eq(cnt, UInt<1>("h0")) @[pass.scala 55:17]
    node _divisor_temp_T = shl(io_divisor, 10) @[pass.scala 58:37]
    node _cnt_T = add(cnt, UInt<1>("h1")) @[pass.scala 59:21]
    node _cnt_T_1 = tail(_cnt_T, 1) @[pass.scala 59:21]
    node _T_1 = neq(cnt, UInt<4>("hc")) @[pass.scala 60:23]
    node _cnt_T_2 = add(cnt, UInt<1>("h1")) @[pass.scala 62:21]
    node _cnt_T_3 = tail(_cnt_T_2, 1) @[pass.scala 62:21]
    node temp = bits(_temp_T_7, 19, 0)
    node _GEN_0 = mux(_T_1, temp, dividend_temp) @[pass.scala 60:31 61:26 41:34]
    node _GEN_1 = mux(_T_1, _cnt_T_3, UInt<1>("h0")) @[pass.scala 60:31 62:16 72:16]
    node _GEN_2 = mux(_T, io_dividend, _GEN_0) @[pass.scala 55:24 57:26]
    node _GEN_3 = mux(_T, _divisor_temp_T, divisor_temp) @[pass.scala 55:24 58:25 42:33]
    node _GEN_4 = mux(_T, _cnt_T_1, _GEN_1) @[pass.scala 55:24 59:16]
    node _r_out_0_T = bits(dividend_temp, 10, 10) @[pass.scala 75:36]
    node _d_out_0_T = bits(dividend_temp, 0, 0) @[pass.scala 76:36]
    node _r_out_1_T = bits(dividend_temp, 11, 11) @[pass.scala 75:36]
    node _d_out_1_T = bits(dividend_temp, 1, 1) @[pass.scala 76:36]
    node _r_out_2_T = bits(dividend_temp, 12, 12) @[pass.scala 75:36]
    node _d_out_2_T = bits(dividend_temp, 2, 2) @[pass.scala 76:36]
    node _r_out_3_T = bits(dividend_temp, 13, 13) @[pass.scala 75:36]
    node _d_out_3_T = bits(dividend_temp, 3, 3) @[pass.scala 76:36]
    node _r_out_4_T = bits(dividend_temp, 14, 14) @[pass.scala 75:36]
    node _d_out_4_T = bits(dividend_temp, 4, 4) @[pass.scala 76:36]
    node _r_out_5_T = bits(dividend_temp, 15, 15) @[pass.scala 75:36]
    node _d_out_5_T = bits(dividend_temp, 5, 5) @[pass.scala 76:36]
    node _r_out_6_T = bits(dividend_temp, 16, 16) @[pass.scala 75:36]
    node _d_out_6_T = bits(dividend_temp, 6, 6) @[pass.scala 76:36]
    node _r_out_7_T = bits(dividend_temp, 17, 17) @[pass.scala 75:36]
    node _d_out_7_T = bits(dividend_temp, 7, 7) @[pass.scala 76:36]
    node _r_out_8_T = bits(dividend_temp, 18, 18) @[pass.scala 75:36]
    node _d_out_8_T = bits(dividend_temp, 8, 8) @[pass.scala 76:36]
    node _r_out_9_T = bits(dividend_temp, 19, 19) @[pass.scala 75:36]
    node _d_out_9_T = bits(dividend_temp, 9, 9) @[pass.scala 76:36]
    node r_out_1 = _r_out_1_T @[pass.scala 46:35 75:21]
    node r_out_0 = _r_out_0_T @[pass.scala 46:35 75:21]
    node io_remain_lo_lo = cat(r_out_1, r_out_0) @[pass.scala 78:26]
    node r_out_4 = _r_out_4_T @[pass.scala 46:35 75:21]
    node r_out_3 = _r_out_3_T @[pass.scala 46:35 75:21]
    node io_remain_lo_hi_hi = cat(r_out_4, r_out_3) @[pass.scala 78:26]
    node r_out_2 = _r_out_2_T @[pass.scala 46:35 75:21]
    node io_remain_lo_hi = cat(io_remain_lo_hi_hi, r_out_2) @[pass.scala 78:26]
    node io_remain_lo = cat(io_remain_lo_hi, io_remain_lo_lo) @[pass.scala 78:26]
    node r_out_6 = _r_out_6_T @[pass.scala 46:35 75:21]
    node r_out_5 = _r_out_5_T @[pass.scala 46:35 75:21]
    node io_remain_hi_lo = cat(r_out_6, r_out_5) @[pass.scala 78:26]
    node r_out_9 = _r_out_9_T @[pass.scala 46:35 75:21]
    node r_out_8 = _r_out_8_T @[pass.scala 46:35 75:21]
    node io_remain_hi_hi_hi = cat(r_out_9, r_out_8) @[pass.scala 78:26]
    node r_out_7 = _r_out_7_T @[pass.scala 46:35 75:21]
    node io_remain_hi_hi = cat(io_remain_hi_hi_hi, r_out_7) @[pass.scala 78:26]
    node io_remain_hi = cat(io_remain_hi_hi, io_remain_hi_lo) @[pass.scala 78:26]
    node _io_remain_T = cat(io_remain_hi, io_remain_lo) @[pass.scala 78:26]
    node d_out_1 = _d_out_1_T @[pass.scala 47:35 76:21]
    node d_out_0 = _d_out_0_T @[pass.scala 47:35 76:21]
    node io_divout_lo_lo = cat(d_out_1, d_out_0) @[pass.scala 79:26]
    node d_out_4 = _d_out_4_T @[pass.scala 47:35 76:21]
    node d_out_3 = _d_out_3_T @[pass.scala 47:35 76:21]
    node io_divout_lo_hi_hi = cat(d_out_4, d_out_3) @[pass.scala 79:26]
    node d_out_2 = _d_out_2_T @[pass.scala 47:35 76:21]
    node io_divout_lo_hi = cat(io_divout_lo_hi_hi, d_out_2) @[pass.scala 79:26]
    node io_divout_lo = cat(io_divout_lo_hi, io_divout_lo_lo) @[pass.scala 79:26]
    node d_out_6 = _d_out_6_T @[pass.scala 47:35 76:21]
    node d_out_5 = _d_out_5_T @[pass.scala 47:35 76:21]
    node io_divout_hi_lo = cat(d_out_6, d_out_5) @[pass.scala 79:26]
    node d_out_9 = _d_out_9_T @[pass.scala 47:35 76:21]
    node d_out_8 = _d_out_8_T @[pass.scala 47:35 76:21]
    node io_divout_hi_hi_hi = cat(d_out_9, d_out_8) @[pass.scala 79:26]
    node d_out_7 = _d_out_7_T @[pass.scala 47:35 76:21]
    node io_divout_hi_hi = cat(io_divout_hi_hi_hi, d_out_7) @[pass.scala 79:26]
    node io_divout_hi = cat(io_divout_hi_hi, io_divout_hi_lo) @[pass.scala 79:26]
    node _io_divout_T = cat(io_divout_hi, io_divout_lo) @[pass.scala 79:26]
    node _io_div_done_T = eq(cnt, UInt<4>("hb")) @[pass.scala 80:29]
    node _io_div_done_T_1 = mux(_io_div_done_T, UInt<1>("h1"), UInt<1>("h0")) @[pass.scala 80:25]
    node flag_cnt = UInt<5>("h0")
    io_divout <= _io_divout_T @[pass.scala 79:18]
    io_remain <= _io_remain_T @[pass.scala 78:18]
    io_div_done <= _io_div_done_T_1 @[pass.scala 80:20]
    dividend_temp <= mux(reset, UInt<20>("h0"), _GEN_2) @[pass.scala 41:{34,34}]
    divisor_temp <= mux(reset, UInt<20>("h0"), _GEN_3) @[pass.scala 42:{33,33}]
    cnt <= mux(reset, UInt<5>("h0"), _GEN_4) @[pass.scala 45:{24,24}]
